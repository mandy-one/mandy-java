---
layout: post
title:  "SpringSecurity(五)"
description: 整合加实践
categories: code
author: mandy-one
---
# 整合加实践
前面四讲：
1. 我们先从jar包或依赖的引入对SpringSecurity环境进行配置
2. 使用命名空间配置在springmvc基础上做了静态数据实现
3. 对配置项进行了配置及理解
4. 对架构与实现进行了理解
在以上内容中我们从对框架一无所知到静态数据实现的功能体验，再到配置项扩展，在配置项扩展过程中，我们重应用，但同时也对原理进行了部分的解析，结合第四讲，能够做到对springsecurity
各部分原理的理解，下面我们结合[博客](http://blog.csdn.net/u012367513/article/details/38866465)的实现从实践的角度对本框架进行实践理解。

## 方法一：静态数据实现
已经完成实现，可以自己多尝试不同配置项设置，熟悉框架。
## 方法二：使用数据库，根据spring security默认实现代码设计数据库
其默认数据库结构在第三讲中有介绍，这种方法比方法一的优势就在于将用户信息存入数据库，方便对用户的管理配置，由其优势可知我们所做该变即改变用户信息来源，这点我们在第三、四讲已经讲的很清楚，即在<authentication-provider>中使用jdbc-user-service，或者采用对UserDetailsService的实现JdbcDaoImpl，两者基本等价，但后者更优，因为其可以配置参数开启组权限，所以方法二的实现只要连接默认配置数据库，同时在securityConfig.xml中修改用户来源为以下内容即可：

```
<authentication-manager alias="authenticationManager">
   <authentication-provider
      user-service-ref="userDetailsService" />
</authentication-manager>

<bean id="userDetailsService"
   class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
   <property name="dataSource" ref="dataSource" />
   <property name="enableGroups" value="true"/>
</bean>
```
## 方法三：使用自定义filter
通过方法二发现似乎还是不太满足需求，只是把用户信息来源灵活化了一点。<br>
问题一：如果我要自定义用户信息源不匹配默认配置怎么办？那就要重新自定义UserDetailsService的实现了，这个我们不单独作为一种方法，可以结合后面需求一起介绍。<br>
问题二：如果我想把资源权限信息不采用静态配置，也放入数据库呢？对此springsecurity默认的未做实现，那我想自己实现要怎么办呢？spring security和Acegi不同，它不能修改默认filter了，但支持插入filter，所以根据这个，我们应该自定义一个filter，这就要结合其架构原理再认真把整个认证流程好好梳理一遍了。<br>
1. 用户登陆，会被AuthenticationProcessingFilter拦截，调用AuthenticationManager的实现，而且AuthenticationManager会调用ProviderManager来获取用户认证信息，不同的Provider调用的服务不同，即用户信息来源不同；
2. 如果验证通过后会将用户的权限信息封装一个User放到spring的全局缓存SecurityContextHolder中，以备后面访问资源时使用。
3. 访问资源（即授权管理），访问url时，会通过AbstractSecurityInterceptor拦截器拦截，其中会调用FilterInvocationSecurityMetadataSource的方法来获取被拦截url所需的全部权限； 再调用授权管理器AccessDecisionManager，这个授权管理器会通过spring的全局缓存SecurityContextHolder获取用户的权限信息，还会获取被拦截的url和被拦截url所需的全部权限，然后根据所配的策略返回（如果权限足够，则返回，权限不够则报错并调用权限不足页面）。<br>
根据流程我们可以总结出来自定义一个filter必须包含 authenticationManager,securityMetadataSource,accessDecisionManager三个属性，其中 authenticationManager属性我们重在实现其UserDetailsService，securityMetadataSource加载全部资源权限信息，accessDecisionManager配置授权策略，查看接口可知主要是实现decide。
因此我们在方法二基础上做如下改变：
securityConfig.xml中配置自定义filter：<br>

http中配置：

```
<custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />  
```
filter配置：
```
<!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性，   
        我们的所有控制将在这三个类中实现-->
<beans:bean id="myFilter"  
        class="com.erdangjiade.spring.security.MyFilterSecurityInterceptor">  
        <b:property name="authenticationManager" ref="authenticationManager" />  
        <b:property name="accessDecisionManager" ref="myAccessDecisionManager" />  
        <b:property name="securityMetadataSource" ref="securityMetadataSource" />  
</beans:bean>  
</b:bean>  
<!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->  
    <authentication-manager alias="authenticationManager">  
        <authentication-provider user-service-ref="myUserDetailService">  
            <!--如果用户的密码采用加密的话 <password-encoder hash="md5" /> -->  
        </authentication-provider>  
    </authentication-manager>  
    <!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->  
    <b:bean id="myUserDetailService" class="com.erdangjiade.spring.security.MyUserDetailService" />  
    <!--访问决策器，配置授权策略，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->  
    <b:bean id="myAccessDecisionManager"  
        class="com.erdangjiade.spring.security.MyAccessDecisionManager">  
    </b:bean>  
    <!--资源源数据信息，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->  
    <b:bean id="securityMetadataSource"  
        class="com.erdangjiade.spring.security.MySecurityMetadataSource" />   

```
下面具体介绍自定义filter中每个类要点：<br>
**MyFilterSecurityInterceptor:**
```
public class MyFilterSecurityInterceptor extends AbstractSecurityInterceptor  implements Filter
```
这个类关键在于实现Filter中的doFilter方法，登陆后，每次访问资源都会访问这个拦截器 ，执行doFilter，调用SecurityMetadataSource 的getAttributes方法获取fi对应的所有权限，再调用MyAccessDecisionManager的decide方法，判断是否有权限，
 然后调用下一个拦截器。这些可以自己实现，有个捷径就是调用父类方法，这也就是为什么继承AbstractSecurityInterceptor，因为框架内部有现成方法可以调用，所以在doFilter中直接调用父类beforeInvocation方法即可完成所需功能。<br>
 **MyUserDetailService：**
 ```
 public class MyUserDetailService implements UserDetailsService
 ```
 这个类我们反复提到，已经非常熟悉了，要实现的接口中只有loadUserByUsername方法，根据所需用户信息源实现这个方法，完成用户信息的加载。<br>
**MySecurityMetadataSource:**
```
public class MySecurityMetadataSource implements FilterInvocationSecurityMetadataSource
```
这个类不能单纯根据接口内容去实现，还要添加重要方法loadResourceDefine，原因可以从问题二找出，资源权限信息源本框架未做动态处理，类比加载用户信息的思路我们增加loadResourceDefine方法，用来根据资源权限信息来源加载全部资源权限信息，完成此工作后才是实现接口方法，获取对应资源权限，供其他类调用。<br>
**MyAccessDecisionManager：**
```
public class MyAccessDecisionManager implements AccessDecisionManager
```
这个类关键在于实现AccessDecisionManager中的decide方法，判断用户是否有权限调用该资源，其实在框架内部有AccessDecisionManager的三种实现，这个可以根据授权策略需求去选择使用或者自定义编写。<br>
## 方法四：暴力手段，修改源码
不符合OO设计原则，不实际，不可用。
## 总结
感觉springsecurity就是一个可以添加到框架中的小模块，就像是软件的小插件，用来实现用户资源权限管理，能让它按默认配置运行起来很容易，想让它按实际需求发挥作用，还需要更全面的学习它的配置项，清楚其可扩展点。<br>
从学习springmvc到springsecurity我发现自己学习的方法很有问题，对原理的关注度不够，以至于学习不够透彻，在结合sringmvc做security实现时很大一部分是由于sringmvc框架不熟悉造成了接口实现类混乱，然而我对自己的springmvc实现还抱有迷之自信，导致迟迟不能发现自己错误，从而觉得一定是security很复杂，迟迟不能实现。
在写代码过程中想先实现别人项目再仿写，盲目复制粘贴，不理逻辑，其中小错误都不能完全改正。<br>
因此我总结出的以后的学习方法，从原理入手，从官方说明文档或相近解析文档入手理解逻辑流程，再根据自己理解做简单实现，扩展时参考别人案例也要步步分析修改，盲目复制粘贴别人项目没有意义。
