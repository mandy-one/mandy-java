---
layout: post
title:  "SpringSecurity(四)"
description: 架构与实现
categories: code
author: mandy-one
---
# 架构与实现
<!--一旦你熟悉了如何创建和运行基于命名空间配置的应用，你可能希望了解框架是如何运行在命名空间的基础上的。像很多软件一样，Spring Security有一些核心接口，类和概念的抽象贯穿整个框架。在这部分，我们将会查看在Spring Secuirty中，这些是如何一起工作来支持认证和访问控制。
<!-- ## 运行时环境
Spring Security 3.0需要Java 5.0或者更高的版本。由于Spring Security致力于以一种自包含的方式运行，因此没有必要在Java运行时环境中放置任何特别的配置文件。特别的，这是指不需要配置 JAAS策略文件，或者将Spring Specurity放置到公用的class path路径下。

类似的，如果你使用一个EJB容器或者Servlet容器，同样也不需要放置任何特殊的配置文件。所有需要的配置文件都包含在我们的应用中。

这种设计方式提供了最大程度上的部署时的灵活性，你只需要简单的从一个操作系统中拷贝的你的部署构件(jar、war或者ear)到另外一个，它就可以立即正常工作。 -->
## 1. 核心组件
### SecurityContextHolder, SecurityContext 和 Authentication 对象

* 最基础的对象是 SecurityContextHolder，这是我们在应用中存储当前安全细节的地方，包含了当前在应用中使用到的principal（通过认证的用户）细节。默认情况下， SecurityContextHolder 使用一个 ThreadLocal 对象来存储这些细节，这表示对于在同一个线程中执行的方法，安全上下文(security context)都是可用的，即使安全上下文没有显式的当做方法的参数进行传递。通过这种方式使用 ThreadLocal 是很安全的，如果当前使用到的principal需要在请求处理完之后被清空（Spring Security自动处理）。

一些应用并不完全适用使用一个 ThreadLocal，这需要考虑使用线程完成工作的方式。可以通过2种方式来实现默认的安全策略( SecurityContextHolder.MODE_THREADLOCAL).第一种方式是设置系统属性，第二种方式是调用 SecurityContextHolder的静态方法。大部分应用不需要改变默认的配置。
#### 获取当前用户信息
在 SecurityContextHolder中我们存储了与系统交互的principal相关细节。Spring Security使用 Authentication 对象来描述这些信息。通常不需要自己创建 Authentication 对象，但是对于 Authentication对象的查询是非常常见的。你可以在应用中的任何地方使用以下代码块来获取当前已认证的用户的名字，例如：
```
Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
if (principal instanceof UserDetails) {
String username = ((UserDetails)principal).getUsername();
} else {
String username = principal.toString();
}
```
通过调用 getContext()方法返回的对象是 SecurityContext 接口的一个实例。这个对象被存储在 thread local里，Spring Security大部分的认证机制通过返回一个 UserDetails 实例作为 principal。
### UserDetailsService
在上面的代码片段，我们需要注意的是可以从一个 Authentication 对象中获取一个principal。principal就是一个 Object而已。大部分情况下，可以强制转换为一个 UserDetails 对象。 UserDetails 是Spring Secuirty中的一个核心接口。它代表了一个principal，其是可扩展的并且是应用相关的。你可以认为UserDetails是你自己的用户数据与Spring Security在 SecurityContextHolder对象中需要使用到的用户数据的适配器。作为你自己的用户数据的某种表现，你会经常强制转换 UserDetails 为应用中原来提供的数据类型，因此你可以调用特定的业务方法，(例如getEmail(), getEmployeeNumber()等等)。<br>
到现在你可能想知道，什么时候我应该提供一个 UserDetails 对象？如何来做？简单的回答是有一个特定的接口 UserDetailsService。这个接口中定义的唯一的方法接受一个String类型的用户名参数，返回 UserDetails对象。
```
UserDetails loadUserByUsername(String username) throws UsernameNotFoundException;
```
这是在Spring Secuirty中加载用户信息最常用的方式，并且你将会看到在框架中任何需要获取一个用户的信息的时候使用的都是这种方式。

在认证成功的情况下， UserDetails 被用来构建 Authentication 对象，并存储在 SecurityContextHolder 中。一个好消息是我们已经提供了大量的 UserDetailsService 的实现，包括使用内存中的map( InMemoryDaoImpl)，和使用JDBC（ JdbcDaoImpl）。尽管如此，大部分用户倾向于基于使用应用中已经存在的用于描述员工、客户或者其他类型用户的数据访问对象(Data Access Object )来编写他们自己的实现。无论UserDetailsService 返回类型是什么，总是可以在 SecurityContextHolder 中通过以上的代码片段来获取。<br>
提示：读者经常会对 UserDetailsService产生疑惑。它是一个纯粹用于获取用户数据的DAO，除了提供框架中其他组件需要的数据,没有任何其他功能，并不验证用户，验证是通过 AuthenticationManager完成。如果我们需要自定义的验证过程，需要直接实现 AuthenticationProvider。
### GrantedAuthority
除了principal， Authentication 提供的另一个重要的方法是 getAuthorities()。这个方法用于提供一个 GrantedAuthority 对象数组。 GrantedAuthority 表示的是授予当前的 principal权利。这些权利通常是角色("roles")，例如 ROLE_ADMINISTRATOR 或者 ROLE_HR_SUPERVISOR。这些角色的配置是为了接下来的web授权、方法授权和域对象授权。Spring Security的其他部分可以解析角色中权利，执行某些操作时必须拥有这些权利。 GrantedAuthority 对象通常通过 UserDetailsService加载，是整个应用范围的权利许可，并不是针对于某个特定的领域对象。<br>
### 总结
这里仅仅是简要概括，目前我们所看到的Spring Security的主要组成部分是：<br>
SecurityContextHolder，提供对 SecurityContext的访问<br>
SecurityContext，维护了 Authentication 和可能的特定请求的安全信息<br>
Authentication，以Spring Security的方式描述principal。<br>
GrantedAuthority，表示在应用范围内授予principal的权利许可。<br>
UserDetailsService，用来根据传递的字符串形式的用户名(或者验证id等类似信息)来创建 UserDetails 对象。<br>
现在你已经对这些总是被重复使用的组件有所理解，让我们来更进一步查看认证的过程。
## 2. 认证
### Spring Security中的验证authentication 到底是什么？
让我们考虑一个每个人都熟悉的标准认证场景：
1. 一个用户被提示使用用户名和密码登录
2. 系统成功的验证了用户名与密码是匹配的
3. 获取到用户的上下文信息(角色列表等)
4. 建立这个用户的安全上下文(security context )
5. 用户可能继续进行一些受到访问控制机制保护的操作，访问控制机制会依据当前安全上下文信息检查这个操作所需的权限。
前三条组成了认证过程，因此我们要看一下在Spring Security中这是如何发生的：
1. 用户名和密码被获取到，并放入一个 UsernamePasswordAuthenticationToken 实例中( Authentication接口的一个实例，我们之前已经看到过)。
2. 这个token被传递到一个 AuthenticationManager 实例中进行认证（认证过程由AuthenticationProvider决定，可自定义）。
3. 在成功认证后， AuthenticationManager返回一个所有字段都被赋值的 Authentication 对象实例。
4. 通过调用 SecurityContextHolder.getContext().setAuthentication(…)创建安全上下文，通过返回的认证对象进行传递。

从这个角度来说，用户被认为已经成功认证。
在Spring Security中构建认证过程是非常简单的，用户在 SecurityContextHolder 包含了一个完整Authentication的时候被认证。
### 直接设置SecurityContextHolder中的内容
事实上，Spring Security并不关心你如何将 Authentication 对象放入 SecurityContextHolder中。唯一的关键要求是在 AbstractSecurityInterceptor 认证一个用户请求之前确保 SecurityContextHolder 包含一个用于表示principal的 Authentication 对象。因此可以编写自己的Filter或者MVC controller，来提供与那些不是基于Spring Security的验证系统的互操作能力。需要做的是编写一个过滤器，从某个位置读取第三方用户信息，构建一个特定的Spring Security Authentication 对象，并将其放入 SecurityContextHolder中。在这种情况下，需要考虑在内置的认证基础结构上自动应用这些。例如，你可能需要在返回给客户端响应之前，预先创建一个Http Session对象来为不同线程缓存安全上下文。
## 3. Spring Security中的访问控制(授权)
Spring Security中负责做出访问控制决定的主要接口是 AccessDecisionManager，其有一个 decide 方法，接受一个描述principal的 Authentication 对象，一个“security object”和一个应用于这个对象的安全元数据属性列表(例如访问一个资源必须被授予的角色列表)。
## 4. 核心服务
现在我们已经在较高的层面对SpringSecuirty的架构和核心类有所了解，现在我们来仔细的查看一到两个其核心接口的实现，特别是AuthenticationManager、UserDetailsService 和AccessDecisionManager。这三个接口会贯穿我们后面文档中的所有内容，因此掌握他们是如何配置以及使用是非常重要的。

### AuthenticationManager, ProviderManager 与AuthenticationProvider
AuthenticationManager 仅仅是一个接口，所以我们可以任意的选择去实现，AuthenticationManager 默认的实现类是ProviderManager ，ProviderManager 并不是自己直接对请求进行验证，而是将其委派给一个AuthenticationProvider 列表。列表中的每一个AuthenticationProvider 将会被依次查询其是否需要通过其进行验证。每个provider的验证结果只有两个情况：抛出一个异常或者完全填充一个Authentication 对象的所有属性。验证一个请求最常见的方式是加载对应的UserDetails 来检查用户输入的密码与其是否匹配。DaoAuthenticationProvider 使用的就是这种方式。被加载的UserDetails对象(包含了GrantedAuthority),在认证成功后，将会被用于填充的Authentication 对象，并且存储在SecurityContext中。

如果使用基于命名空间的配置，将会框架内部自动创建并维护一个ProviderManager 对象，可以在命名空间的authentication provider元素中往ProviderManager对象中添加provider。在这种情下，不必在application context中声明一个ProviderManager Bean。如果有多个provider，他们将会被按顺序进行尝试(内部使用了一个List)，每个provider都可以尝试进行认证，或者简单的通过返回null来跳过认证。如果所有的provider都返回了null，ProviderManager 将会抛出一个ProviderNotFoundException异常。

### 成功认证后删除验证信息
从Spring Security 3.1之后，在请求认证成功后ProviderManager 将会删除Authentication 中的认证信息，这可以阻止一些敏感信息例如密码在不需要的时候还长时间保留。

这可能会导致一些问题，例如你希望通过缓存user对象来提高一个无状态应用的性能。如果Authentication对象包含了位于缓存中的并且移除了认证信息的对象(例如UserDetails )的引用，那么就无法再继续使用缓存的对象来进行验证。在你使用缓存的时候，你需要考虑这个因素。一个显而易见的解决方案是，无论是在AuthenticationProvider 还是在缓存的实现中，在创建Authentication 对象的时候，将这个对象拷贝一份。或者你也可以禁用ProviderManager的eraseCredentialsAfterAuthentication属性。<br>
### DaoAuthenticationProvider
Spring Security提供了一个AuthenticationProvider 的简单实现DaoAuthenticationProvider，这也是框架最早支持的provider。它使用了一个UserDetailsService 来查询用户名、密码和GrantedAuthority 。其简单的通过比较封装了用户的密码信息的UsernamePasswordAuthenticationToken和通过UserDetailsService查询出来的用户的密码是否相同来验证用户。对于这个provider的配置非常简单。
```
<bean id="daoAuthenticationProvider"
	class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
	<property name="userDetailsService" ref="inMemoryDaoImpl"/>
	<property name="passwordEncoder" ref="passwordEncoder"/>
</bean>
```
PasswordEncoder 是可选的。PasswordEncoder 提供了对通过UserDetailsService查询返回的UserDetails 对象中的密码进行编码和解码的功能。

### UserDetailsService实现（本块前面已有涉及）

像本教程之前提到的一样，大部分验证provider都利用了UserDetails 和UserDetailsService 接口。回顾一下UserDetailsService 中只定义了一个方法：
```
UserDetails loadUserByUsername(String username) throws UsernameNotFoundException;
```
返回的UserDetails 也是一个接口，其只提供了getters方法来保证用户的验证信息例如用户名、密码和被授予的权利等不会因为用户账号的禁用或者启用而被置为空。大部分验证提供者都会使用UserDetailsService，即使username和password在验证过程中不需要使用到。他们也可能只使用UserDetails 对象中GrantedAuthority 信息。因为一些其他的系统(例如 LDAP or X.509 or CAS)接管了验证用户信息的责任。
Spring Security已经提供一些基础的实现，下面我们将会进行介绍。
#### 基于内存的验证
我们很容易就可以创建一个自定义的UserDetailsService 实现，从我们的持久化引擎中提取信息，但是很多应用并不需要这么复杂。特别是我们在创建一个样本应用(prototype application)，或者仅仅是为了继承Spring Security时更是如此，这个时候我们并不想花费时间时间来配置数据库或者编写的UserDetailsService实现。对于这种情形，一个简单的选择是使用命名空间中的user-service元素。
<user-service id="userDetailsService">
    <user name="jimi" password="jimispassword" authorities="ROLE_USER, ROLE_ADMIN" />
    <user name="bob" password="bobspassword" authorities="ROLE_USER" />
</user-service>
也支持使用一个外部属性文件
```
username=password,grantedAuthority[,grantedAuthority][,enabled|disabled]
```
属性文件的内容格式
```
username=password,grantedAuthority[,grantedAuthority][,enabled|disabled]
```
#### JdbcDaoImpl
SpringSecurity同样包含了一个可以通过JDBC数据源获取验证的信息的UserDetailsService,下面是一个案例配置：
```
<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="org.hsqldb.jdbcDriver"/>
    <property name="url" value="jdbc:hsqldb:hsql://localhost:9001"/>
    <property name="username" value="sa"/>
    <property name="password" value=""/>
</bean>
<bean id="userDetailsService"
	class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
    <property name="dataSource" ref="dataSource"/>
</bean>
```
可以通过修改上面展示的DriverManagerDataSource 来使用不同的关系型数据库管理系统。
