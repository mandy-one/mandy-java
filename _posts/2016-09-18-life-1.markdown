---
layout: post
title:  "Why did I leave a high paying job?"
description: orem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.
categories: life
author: ashwathama
---

# 方法一：不用数据库，全部数据写在配置文件
web.xml在springmvc基础上需增加配置：
``` javascript
<!-- spring配置文件位置 -->
<context-param>
<param-name>contextConfigLocation</param-name>
<param-value>classpath:applicationContext.xml,classpath:spring-security.xml</param-value>
</context-param>

<!-- spring核心监听器 -->
<listener>
<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>
<!-- spring security定义一个 filter 用来拦截需要交给 Spring Security 处理的请求，需要注意的是该 filter 一定要定义在其它如 SpringMVC 等拦截请求之前 -->
<filter>
<filter-name>springSecurityFilterChain</filter-name>
<filter-class>org.springframework.web.filter.DelegatingFilterProxy
</filter-class>
</filter>

<filter-mapping>
<filter-name>springSecurityFilterChain</filter-name>
<url-pattern>/*</url-pattern>
<filter-mapping>~
```
Spring-security.xml:
``` javascript
<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"

        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:security="http://www.springframework.org/schema/security"
        xmlns:jdbc="http://www.springframework.org/schema/jdbc"
        xmlns:context="http://www.springframework.org/schema/context"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
         http://www.springframework.org/schema/security
         http://www.springframework.org/schema/security/spring-security-4.1.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <security:http pattern="/loginPage" security="none"></security:http>
    <security:http auto-config="true">
        <security:intercept-url pattern="/admin" access="hasRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/**" access="hasRole('ROLE_USER')"/>
        <security:form-login login-page="/loginPage" login-processing-url="/login" authentication-success-handler-ref="MyAuthenticationSuccessHandler"
                    authentication-failure-url="/loginPage?error=error"/>
        <security:logout logout-url="/logout" logout-success-url="/loginPage" invalidate-session="true"/>
        <security:remember-me key="authorition"/>
        <security:csrf disabled="true"/>

    </security:http>
    <bean id="MyAuthenticationSuccessHandler" class="cn.myproject.security.MyAuthenticationSuccessHandler"/>


    <security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
                <security:user name="user" password="user" authorities="ROLE_USER"/>
                <security:user name="admin" password="admin" authorities="ROLE_USER, ROLE_ADMIN"/>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>
</beans>
```
applicationContext.xml:不需要连接数据库获取数据，此文件不需配置；
MyAuthenticationSuccessHandler:框架默认在认证完成后跳转到登陆前请求的url，通过在security中配置验证成功后的处理类来实现不同用户的不同跳转页面

``` javascript
package cn.myproject.security;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;

public class MyAuthenticationSuccessHandler implements AuthenticationSuccessHandler {

    @Override
    public void onAuthenticationSuccess(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication) throws IOException, ServletException {
        Collection<? extends GrantedAuthority> authorities=new ArrayList<GrantedAuthority>();
        Object principal = authentication.getPrincipal();
        if (principal instanceof UserDetails) {
            authorities = ((UserDetails)principal).getAuthorities();
        }

        if(authorities.toString().contains("ROLE_ADMIN"))
        {
            httpServletResponse.sendRedirect("admin");
        }else if(authorities.toString().contains("ROLE_USER")){
            httpServletResponse.sendRedirect("user");
        }

    }
}
```
Controller配置如下：
LoginController:
``` javascript
package cn.myproject.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;


@Controller
public class LoginController {

    @RequestMapping(value = "/loginPage", method = RequestMethod.GET)
    public String loginPage(@RequestParam(value = "error",required = false)String error,Model model) {
        if(error!= null) {
            return "login-failure";
        }
        return "login";
    }
}
```
HelloController:
``` javascript
package cn.myproject.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
@Controller
public class HelloController {
    @RequestMapping(value={"/admin"},method= RequestMethod.GET)
    public String admin(){
        return "admin" ;
    }
    //访客页面
    @RequestMapping(value={"/user"},method= RequestMethod.GET)
    public String user(){
        return "user" ;
    }
}
```
